#include <bits/stdc++.h>
using namespace std;

struct TLinkOne {
	int data;
	TLinkOne*address;
};


void push_back(TLinkOne*& head, TLinkOne*& tail, int dat) {
	TLinkOne* temp = new TLinkOne;
	temp->data = dat;
	temp->address = NULL;

	if (head == NULL) {
		head = temp;
		tail = temp;
		return;
	}
	tail->address = temp;
	tail = temp;
}

bool pop_back(TLinkOne*& head, TLinkOne*& tail, int& dat) {
	if (head == NULL) return false;
	if (head == tail) {
		dat = head->data;
		delete head;
		head = tail = NULL;
		return true;
	}
	TLinkOne* cur = head;
	while (cur->address != tail) {
		cur = cur->address;
	}

	dat = tail->data;
	TLinkOne* temp = tail;
	cur->address = NULL;
	tail = cur;
	delete temp;
	return true;
}

void push_front(TLinkOne*& head, TLinkOne*& tail, int dat) {
	TLinkOne* temp = new TLinkOne;
	temp->data = dat;
	temp->address = NULL;
	if (head == NULL) {
		head = temp;
		tail = temp;
		return;
	}

	temp->address = head;
	head = temp;
}

bool pop_front(TLinkOne*& head, TLinkOne*& tail, int& dat) {
	if (head == NULL) return false;
	if (head == tail) {
		dat = head->data;
		delete head;
		head = tail = NULL;
		return true;
	}

	TLinkOne* temp = head;
	dat = head->data;
	head = head->address;
	delete temp;
	return true;
}

bool front(TLinkOne*head, int &dat) {
	if(head == NULL)return false;
	dat = head -> data;
	return true;
}

bool back(TLinkOne*tail, int &dat) {
	if(tail == NULL)return false;
	dat = tail -> data;
	return true;
}

int size(TLinkOne*head) {
	int res= 0;

	while(head != NULL) {
		head = head -> address;
		res++;
	}
	return res;
}

void clear(TLinkOne*&head,TLinkOne*&tail) {
	TLinkOne*temp = head;
	while(head != NULL) {
		temp = head;
		head = head -> address;
		delete temp;
	}
	tail = NULL;

}

int main() {
	string com;
	int N;
	TLinkOne*head = NULL;
	TLinkOne*tail = NULL;
	bool flag = true;
	while(flag) {
		cin >> com;
		if(com == "push_front") {
			cin >> N;
			push_front(head,tail,N);
			cout << "ok"<<"\n";
		}
		else if(com == "push_back") {
			cin >> N;
			push_back(head,tail,N);
			cout << "ok"<<"\n";
		}
		else if(com == "pop_front") {
			if(!pop_front(head,tail,N)) cout << "error" <<"\n";
			else cout <<N<<"\n";
		}
		else if(com == "pop_back") {
			if(!pop_back(head,tail,N)) cout << "error" <<"\n";
			else cout <<N<<"\n";
		}
		else if(com == "front") {
			if(!front(head,N)) cout << "error"<<"\n";
			else cout <<N<<"\n";
		}
		else if(com == "back") {
			if(!back(tail,N)) cout << "error"<<"\n";
			else cout <<N<<"\n";
		}
		else if(com == "size") {
			cout << size(head) <<"\n";
		}
		else if(com == "clear") {
			clear(head,tail);
			cout << "ok"<<"\n";
		}
		else if(com == "exit") {
			flag = false;
			cout << "bye"<<"\n";
		}
	}
	return 0;
}
